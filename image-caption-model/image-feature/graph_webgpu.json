{
  "kernel_source": "\n#include <metal_stdlib>\nusing namespace metal;\n\n#define OPTIMIZE 1\n\nkernel void transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    device float * v2 = (static_buffer + meta_buffer[1]);\n    const int v3 = meta_buffer[2];\n    const int v4 = meta_buffer[3];\n    const int D0 = meta_buffer[4];\n    const int D1 = meta_buffer[5];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v5 = v1[d0*v3 + d1];\n            float v6;\n            {\n                v6 = v5;\n            }\n            v2[d0 + d1*v4] = v6;\n        }\n    }\n}\n\n\nkernel void im2col_f234fa81b99b83ffc5bb5edb9b06770444bf5cde426d8b951fd2cccd(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index_thread[[thread_position_in_threadgroup]],\n                          uint index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 0\n#define SW_EQUAL_1 0\n#define DH_EQUAL_1 1\n#define DW_EQUAL_1 1\n#define C1_DIVIDABLE_BY_4 0\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)((static_buffer + meta_buffer[0]));\n    device float4 *col4 = (device float4 *)((static_buffer + meta_buffer[1]));\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = (static_buffer + meta_buffer[0]);\n    device float *col = (static_buffer + meta_buffer[1]);\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n#if !DH_EQUAL_1\n    const int DH = meta_buffer[10];\n#endif\n#if !DW_EQUAL_1\n    const int DW = meta_buffer[11];\n#endif\n    const int PH = meta_buffer[14];\n    const int PW = meta_buffer[15];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[12];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[13];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n    #if DH_EQUAL_1\n            const int h2 = h1 + PH - kh;\n    #else\n            const int h2 = h1 + PH - kh * DH;\n    #endif\n    \n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n    #if DH_EQUAL_1\n            const int h2 = (h1 + PH - kh) / SH;\n    #else\n            const int h2 = (h1 + PH - kh * DH) / SH;\n    #endif\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n    #if DW_EQUAL_1\n                const int w2 = w1 + PW - kw;\n    #else\n                const int w2 = w1 + PW - kw * DW;\n    #endif\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n    #if DW_EQUAL_1\n                const int w2 = (w1 + PW - kw) / SW;\n    #else\n                const int w2 = (w1 + PW - kw * DW) / SW;\n    #endif\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef DH_EQUAL_1\n#undef DW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void sgemm_a7c2ce03cada0462628130dd55b53fe49eea5d6d918814d6a9d49d9c(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 0\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    const int v5 = meta_buffer[4];\n    const int v6 = meta_buffer[5];\n    const int D0 = meta_buffer[6];\n    const int D1 = meta_buffer[7];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v7 = v1[d0];\n        const float v8 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v9 = v3[d0 + d1*v5];\n            float v10;\n            {\n                v10 = v9 * v7;\n            }\n            float v11;\n            {\n                v11 = v10 + v8;\n            }\n            float v12;\n            {\n                v12 = v11 > 0 ? v11 : 0;\n            }\n            v4[d0 + d1*v6] = v12;\n        }\n    }\n}\n\n\nkernel void maxpooling2d_fdd28c996dc6552178be6541f1b2adfa1ab7c31ec0bb9c2b70bff1e7(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *X = (static_buffer + meta_buffer[0]);\n    device float *Y = (static_buffer + meta_buffer[1]);\n    const int N = meta_buffer[2];\n    const int H1 = meta_buffer[3];\n    const int W1 = meta_buffer[4];\n    const int C = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    \n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int SH = meta_buffer[10];\n    const int SW = meta_buffer[11];\n    const int PH = meta_buffer[12];\n    const int PW = meta_buffer[13];\n    \n    for (int gid = index; gid < N * H2 * W2 * C; gid += num_threads) {\n        const int c = gid % C;\n        const int w2 = gid / C % W2;\n        const int h2 = gid / C / W2 % H2;\n        const int n = gid / C / W2 / H2;\n\n        float v = -1e7;\n        for (int kh = 0; kh < KH; kh++) {\n            const int h1 = h2 * SH - PH + kh;\n            if (h1 < 0 || h1 >= H1) continue;\n            \n            for (int kw = 0; kw < KW; kw++) {\n                const int w1 = w2 * SW - PW + kw;\n                if (w1 < 0 || w1 >= W1) continue;\n\n                v = v > X[((n * H1 + h1) * W1 + w1) * C + c] ? v : X[((n * H1 + h1) * W1 + w1) * C + c];\n            }\n        }\n\n        Y[gid] = v;\n    }\n}\n\n\nkernel void sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index_thread[[thread_position_in_threadgroup]],\n                          uint index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 1\n#define SW_EQUAL_1 1\n#define DH_EQUAL_1 1\n#define DW_EQUAL_1 1\n#define C1_DIVIDABLE_BY_4 1\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)((static_buffer + meta_buffer[0]));\n    device float4 *col4 = (device float4 *)((static_buffer + meta_buffer[1]));\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = (static_buffer + meta_buffer[0]);\n    device float *col = (static_buffer + meta_buffer[1]);\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n#if !DH_EQUAL_1\n    const int DH = meta_buffer[10];\n#endif\n#if !DW_EQUAL_1\n    const int DW = meta_buffer[11];\n#endif\n    const int PH = meta_buffer[14];\n    const int PW = meta_buffer[15];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[12];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[13];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n    #if DH_EQUAL_1\n            const int h2 = h1 + PH - kh;\n    #else\n            const int h2 = h1 + PH - kh * DH;\n    #endif\n    \n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n    #if DH_EQUAL_1\n            const int h2 = (h1 + PH - kh) / SH;\n    #else\n            const int h2 = (h1 + PH - kh * DH) / SH;\n    #endif\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n    #if DW_EQUAL_1\n                const int w2 = w1 + PW - kw;\n    #else\n                const int w2 = w1 + PW - kw * DW;\n    #endif\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n    #if DW_EQUAL_1\n                const int w2 = (w1 + PW - kw) / SW;\n    #else\n                const int w2 = (w1 + PW - kw * DW) / SW;\n    #endif\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef DH_EQUAL_1\n#undef DW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void fusedelementwise_35f52167c82b1ad09a2b37a846fe20c3ec257d036083301fce3b32f6(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int D0 = meta_buffer[9];\n    const int D1 = meta_buffer[10];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v10 = v1[d0];\n        const float v11 = v2[d0];\n        const float v12 = v3[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v5[d0 + d1*v8];\n            float v14;\n            {\n                v14 = v13 * v10;\n            }\n            const float v15 = v4[d0 + d1*v7];\n            float v16;\n            {\n                v16 = v15 * v12;\n            }\n            float v17;\n            {\n                v17 = v16 + v14;\n            }\n            float v18;\n            {\n                v18 = v17 + v11;\n            }\n            float v19;\n            {\n                v19 = v18 > 0 ? v18 : 0;\n            }\n            v6[d0 + d1*v9] = v19;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    const int v5 = meta_buffer[4];\n    const int v6 = meta_buffer[5];\n    const int D0 = meta_buffer[6];\n    const int D1 = meta_buffer[7];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v7 = v1[d0];\n        const float v8 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v9 = v3[d0 + d1*v5];\n            float v10;\n            {\n                v10 = v9 * v8;\n            }\n            float v11;\n            {\n                v11 = v10 + v7;\n            }\n            float v12;\n            {\n                v12 = v11 > 0 ? v11 : 0;\n            }\n            v4[d0 + d1*v6] = v12;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_c49895ea0b1fcc3f99bc69b0b69410a59a3c62a42420fb62c0c95cf6(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    device float * v5 = (static_buffer + meta_buffer[4]);\n    const int v6 = meta_buffer[5];\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v11 = v3[d0 + d1*v6];\n            float v12;\n            {\n                v12 = v11 * v10;\n            }\n            const float v13 = v4[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v12 + v13;\n            }\n            float v15;\n            {\n                v15 = v14 + v9;\n            }\n            float v16;\n            {\n                v16 = v15 > 0 ? v15 : 0;\n            }\n            v5[d0 + d1*v8] = v16;\n        }\n    }\n}\n\n\nkernel void im2col_a73d6417028f0b285d50e54757b90b31d98ada1211f66bd0af5efb97(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index_thread[[thread_position_in_threadgroup]],\n                          uint index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 0\n#define SW_EQUAL_1 0\n#define DH_EQUAL_1 1\n#define DW_EQUAL_1 1\n#define C1_DIVIDABLE_BY_4 1\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)((static_buffer + meta_buffer[0]));\n    device float4 *col4 = (device float4 *)((static_buffer + meta_buffer[1]));\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = (static_buffer + meta_buffer[0]);\n    device float *col = (static_buffer + meta_buffer[1]);\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n#if !DH_EQUAL_1\n    const int DH = meta_buffer[10];\n#endif\n#if !DW_EQUAL_1\n    const int DW = meta_buffer[11];\n#endif\n    const int PH = meta_buffer[14];\n    const int PW = meta_buffer[15];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[12];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[13];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n    #if DH_EQUAL_1\n            const int h2 = h1 + PH - kh;\n    #else\n            const int h2 = h1 + PH - kh * DH;\n    #endif\n    \n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n    #if DH_EQUAL_1\n            const int h2 = (h1 + PH - kh) / SH;\n    #else\n            const int h2 = (h1 + PH - kh * DH) / SH;\n    #endif\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n    #if DW_EQUAL_1\n                const int w2 = w1 + PW - kw;\n    #else\n                const int w2 = w1 + PW - kw * DW;\n    #endif\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n    #if DW_EQUAL_1\n                const int w2 = (w1 + PW - kw) / SW;\n    #else\n                const int w2 = (w1 + PW - kw * DW) / SW;\n    #endif\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef DH_EQUAL_1\n#undef DW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 0\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)((static_buffer + meta_buffer[1])) \n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32) \n        ? ((static_buffer + meta_buffer[1])) \n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n}\n\n\nkernel void fusedelementwise_e742449ea383ad141b1c764d25f72c663a87a528e401ee81d337072e(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    device float * v5 = (static_buffer + meta_buffer[4]);\n    const int v6 = meta_buffer[5];\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v11 = v4[d0 + d1*v7];\n            float v12;\n            {\n                v12 = v11 * v9;\n            }\n            const float v13 = v3[d0 + d1*v6];\n            float v14;\n            {\n                v14 = v12 + v13;\n            }\n            float v15;\n            {\n                v15 = v14 + v10;\n            }\n            float v16;\n            {\n                v16 = v15 > 0 ? v15 : 0;\n            }\n            v5[d0 + d1*v8] = v16;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_4528ce85e1c5a6d843047992c0c9c690a469bf7d45294cc16e7794c5(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    device float * v5 = (static_buffer + meta_buffer[4]);\n    const int v6 = meta_buffer[5];\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int D0 = meta_buffer[8];\n    const int D1 = meta_buffer[9];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v9 = v1[d0];\n        const float v10 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v11 = v3[d0 + d1*v6];\n            float v12;\n            {\n                v12 = v11 * v9;\n            }\n            const float v13 = v4[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v12 + v13;\n            }\n            float v15;\n            {\n                v15 = v14 + v10;\n            }\n            float v16;\n            {\n                v16 = v15 > 0 ? v15 : 0;\n            }\n            v5[d0 + d1*v8] = v16;\n        }\n    }\n}\n\n\nkernel void fusedelementwise_3b2962ea306807ae8e407c686c162810d84fc70f22a63d48ea9a603a(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    const device float * v4 = (static_buffer + meta_buffer[3]);\n    const device float * v5 = (static_buffer + meta_buffer[4]);\n    device float * v6 = (static_buffer + meta_buffer[5]);\n    const int v7 = meta_buffer[6];\n    const int v8 = meta_buffer[7];\n    const int v9 = meta_buffer[8];\n    const int D0 = meta_buffer[9];\n    const int D1 = meta_buffer[10];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v10 = v1[d0];\n        const float v11 = v2[d0];\n        const float v12 = v3[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v13 = v4[d0 + d1*v7];\n            float v14;\n            {\n                v14 = v13 * v10;\n            }\n            const float v15 = v5[d0 + d1*v8];\n            float v16;\n            {\n                v16 = v15 * v11;\n            }\n            float v17;\n            {\n                v17 = v16 + v14;\n            }\n            float v18;\n            {\n                v18 = v17 + v12;\n            }\n            float v19;\n            {\n                v19 = v18 > 0 ? v18 : 0;\n            }\n            v6[d0 + d1*v9] = v19;\n        }\n    }\n}\n\n\nkernel void averagepooling2d_e40a36b3a1265ae67e8fac3ce9b75331da5987fb264e9b069187c9c1(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *X = (static_buffer + meta_buffer[0]);\n    device float *Y = (static_buffer + meta_buffer[1]);\n    const int N = meta_buffer[2];\n    const int H1 = meta_buffer[3];\n    const int W1 = meta_buffer[4];\n    const int C = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int SH = meta_buffer[10];\n    const int SW = meta_buffer[11];\n    const int PH = meta_buffer[12];\n    const int PW = meta_buffer[13];\n    \n    for (int gid = index; gid < N * H2 * W2 * C; gid += num_threads) {\n        const int c = gid % C;\n        const int w2 = gid / C % W2;\n        const int h2 = gid / C / W2 % H2;\n        const int n = gid / C / W2 / H2;\n\n        float v = 0;\n        for (int kh = 0; kh < KH; kh++) {\n            const int h1 = h2 * SH - PH + kh;\n            if (h1 < 0 || h1 >= H1) continue;\n            \n            for (int kw = 0; kw < KW; kw++) {\n                const int w1 = w2 * SW - PW + kw;\n                if (w1 < 0 || w1 >= W1) continue;\n\n                v += X[((n * H1 + h1) * W1 + w1) * C + c];\n            }\n        }\n        v /= KH * KW;\n\n        Y[gid] = v;\n    }\n}\n\n\nkernel void transpose_004b4f39e9e976c3a0c2492294b329e4263fa637435784552851f71d(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    device float * v2 = (static_buffer + meta_buffer[1]);\n    const int D0 = meta_buffer[2];\n    int d0;\n    for (d0 = gid; d0 < D0; d0 += num_threads) {\n        const float v3 = v1[d0];\n        float v4;\n        {\n            v4 = v3;\n        }\n        v2[d0] = v4;\n    }\n}\n\n\nkernel void elementwiseadd_59df3b0d6feefd576062ac58c68e6dade28056ea47dd0a57294bdf90(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int D0 = meta_buffer[3];\n    int d0;\n    for (d0 = gid; d0 < D0; d0 += num_threads) {\n        const float v4 = v1[d0];\n        const float v5 = v2[d0];\n        float v6;\n        {\n            v6 = v5 + v4;\n        }\n        v3[d0] = v6;\n    }\n}\n",
  "exec_infos": [
    {
      "entry_func_name": "transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        183,
        170,
        1,
        64,
        167,
        167,
        1,
        0,
        196,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        196,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_f234fa81b99b83ffc5bb5edb9b06770444bf5cde426d8b951fd2cccd",
      "threadgroups_per_grid": {
        "width": 52900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        167,
        1,
        64,
        167,
        118,
        1,
        1,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_a7c2ce03cada0462628130dd55b53fe49eea5d6d918814d6a9d49d9c",
      "threadgroups_per_grid": {
        "width": 196,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        118,
        1,
        0,
        0,
        0,
        0,
        64,
        119,
        158,
        1,
        0,
        49,
        0,
        0,
        64,
        0,
        0,
        0,
        147,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        37,
        0,
        0,
        192,
        36,
        0,
        0,
        64,
        119,
        158,
        1,
        64,
        167,
        118,
        1,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        49,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "maxpooling2d_fdd28c996dc6552178be6541f1b2adfa1ab7c31ec0bb9c2b70bff1e7",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        118,
        1,
        64,
        151,
        164,
        1,
        1,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        151,
        164,
        1,
        64,
        37,
        0,
        0,
        64,
        167,
        167,
        1,
        64,
        12,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        53,
        0,
        0,
        64,
        53,
        0,
        0,
        64,
        167,
        167,
        1,
        64,
        167,
        167,
        1,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        12,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 3364,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        167,
        1,
        64,
        167,
        118,
        1,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        118,
        1,
        192,
        53,
        0,
        0,
        64,
        167,
        167,
        1,
        64,
        12,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        198,
        0,
        0,
        192,
        197,
        0,
        0,
        64,
        167,
        167,
        1,
        64,
        159,
        141,
        1,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        12,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        159,
        141,
        1,
        64,
        198,
        0,
        0,
        64,
        167,
        118,
        1,
        64,
        12,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        151,
        164,
        1,
        64,
        6,
        1,
        0,
        64,
        231,
        130,
        1,
        64,
        12,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_35f52167c82b1ad09a2b37a846fe20c3ec257d036083301fce3b32f6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        71,
        1,
        0,
        64,
        70,
        1,
        0,
        64,
        72,
        1,
        0,
        64,
        167,
        118,
        1,
        64,
        231,
        130,
        1,
        64,
        55,
        146,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        12,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        55,
        146,
        1,
        64,
        73,
        1,
        0,
        64,
        159,
        141,
        1,
        64,
        12,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        137,
        1,
        0,
        64,
        137,
        1,
        0,
        64,
        159,
        141,
        1,
        64,
        151,
        164,
        1,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        12,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 3364,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        151,
        164,
        1,
        64,
        167,
        118,
        1,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        118,
        1,
        192,
        137,
        1,
        0,
        64,
        151,
        164,
        1,
        64,
        12,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        25,
        2,
        0,
        0,
        26,
        2,
        0,
        64,
        151,
        164,
        1,
        64,
        159,
        141,
        1,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        12,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        159,
        141,
        1,
        64,
        26,
        2,
        0,
        64,
        119,
        158,
        1,
        64,
        12,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_c49895ea0b1fcc3f99bc69b0b69410a59a3c62a42420fb62c0c95cf6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        90,
        2,
        0,
        64,
        91,
        2,
        0,
        64,
        119,
        158,
        1,
        64,
        55,
        146,
        1,
        64,
        119,
        158,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        12,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        119,
        158,
        1,
        64,
        92,
        2,
        0,
        64,
        159,
        141,
        1,
        64,
        12,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        156,
        2,
        0,
        64,
        156,
        2,
        0,
        64,
        159,
        141,
        1,
        64,
        55,
        146,
        1,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        12,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 3364,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        55,
        146,
        1,
        64,
        167,
        118,
        1,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        118,
        1,
        192,
        156,
        2,
        0,
        64,
        55,
        146,
        1,
        64,
        12,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        45,
        3,
        0,
        192,
        44,
        3,
        0,
        64,
        55,
        146,
        1,
        64,
        159,
        141,
        1,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        12,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_94f0c54b77dcb1fbad06f386c4665ef898e786f3080ae97e8195afb1",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        159,
        141,
        1,
        64,
        45,
        3,
        0,
        64,
        55,
        146,
        1,
        64,
        12,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_c49895ea0b1fcc3f99bc69b0b69410a59a3c62a42420fb62c0c95cf6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        109,
        3,
        0,
        64,
        110,
        3,
        0,
        64,
        55,
        146,
        1,
        64,
        119,
        158,
        1,
        64,
        231,
        130,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        12,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_a73d6417028f0b285d50e54757b90b31d98ada1211f66bd0af5efb97",
      "threadgroups_per_grid": {
        "width": 3136,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        231,
        130,
        1,
        64,
        39,
        143,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        39,
        143,
        1,
        64,
        111,
        3,
        0,
        64,
        167,
        167,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        239,
        3,
        0,
        192,
        239,
        3,
        0,
        64,
        167,
        167,
        1,
        64,
        47,
        169,
        1,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        16,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        47,
        169,
        1,
        64,
        167,
        118,
        1,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        118,
        1,
        64,
        240,
        3,
        0,
        64,
        167,
        167,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        48,
        6,
        0,
        64,
        48,
        6,
        0,
        64,
        167,
        167,
        1,
        64,
        55,
        146,
        1,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        16,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        55,
        146,
        1,
        64,
        49,
        6,
        0,
        64,
        151,
        164,
        1,
        16,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        128,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        39,
        143,
        1,
        64,
        49,
        7,
        0,
        64,
        55,
        146,
        1,
        16,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_35f52167c82b1ad09a2b37a846fe20c3ec257d036083301fce3b32f6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        51,
        9,
        0,
        64,
        49,
        9,
        0,
        64,
        53,
        9,
        0,
        64,
        151,
        164,
        1,
        64,
        55,
        146,
        1,
        64,
        143,
        138,
        1,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        143,
        138,
        1,
        64,
        55,
        9,
        0,
        64,
        175,
        144,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        55,
        10,
        0,
        64,
        55,
        10,
        0,
        64,
        175,
        144,
        1,
        64,
        175,
        144,
        1,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        16,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        175,
        144,
        1,
        64,
        167,
        118,
        1,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        118,
        1,
        64,
        56,
        10,
        0,
        64,
        175,
        144,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        120,
        12,
        0,
        64,
        120,
        12,
        0,
        64,
        175,
        144,
        1,
        64,
        167,
        167,
        1,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        16,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        167,
        1,
        64,
        121,
        12,
        0,
        64,
        119,
        158,
        1,
        16,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        128,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_e742449ea383ad141b1c764d25f72c663a87a528e401ee81d337072e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        123,
        13,
        0,
        64,
        121,
        13,
        0,
        64,
        143,
        138,
        1,
        64,
        119,
        158,
        1,
        64,
        151,
        164,
        1,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        151,
        164,
        1,
        64,
        125,
        13,
        0,
        64,
        55,
        146,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        125,
        14,
        0,
        64,
        125,
        14,
        0,
        64,
        55,
        146,
        1,
        64,
        175,
        144,
        1,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        16,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        175,
        144,
        1,
        64,
        167,
        118,
        1,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        118,
        1,
        64,
        126,
        14,
        0,
        64,
        175,
        144,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        190,
        16,
        0,
        192,
        190,
        16,
        0,
        64,
        175,
        144,
        1,
        64,
        39,
        143,
        1,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        16,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        39,
        143,
        1,
        64,
        191,
        16,
        0,
        64,
        111,
        132,
        1,
        16,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        128,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_4528ce85e1c5a6d843047992c0c9c690a469bf7d45294cc16e7794c5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        193,
        17,
        0,
        64,
        191,
        17,
        0,
        64,
        111,
        132,
        1,
        64,
        151,
        164,
        1,
        64,
        111,
        132,
        1,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        111,
        132,
        1,
        64,
        195,
        17,
        0,
        64,
        175,
        144,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        195,
        18,
        0,
        192,
        195,
        18,
        0,
        64,
        175,
        144,
        1,
        64,
        39,
        143,
        1,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        16,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        39,
        143,
        1,
        64,
        167,
        118,
        1,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        118,
        1,
        64,
        196,
        18,
        0,
        64,
        39,
        143,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        4,
        21,
        0,
        64,
        4,
        21,
        0,
        64,
        39,
        143,
        1,
        64,
        39,
        143,
        1,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        16,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        39,
        143,
        1,
        64,
        5,
        21,
        0,
        64,
        151,
        164,
        1,
        16,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        128,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_c49895ea0b1fcc3f99bc69b0b69410a59a3c62a42420fb62c0c95cf6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        5,
        22,
        0,
        64,
        7,
        22,
        0,
        64,
        151,
        164,
        1,
        64,
        111,
        132,
        1,
        64,
        143,
        138,
        1,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        3,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_a73d6417028f0b285d50e54757b90b31d98ada1211f66bd0af5efb97",
      "threadgroups_per_grid": {
        "width": 784,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        143,
        138,
        1,
        64,
        175,
        144,
        1,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        175,
        144,
        1,
        64,
        9,
        22,
        0,
        64,
        47,
        169,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        9,
        24,
        0,
        64,
        10,
        24,
        0,
        64,
        47,
        169,
        1,
        64,
        243,
        169,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        243,
        169,
        1,
        64,
        231,
        130,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        231,
        130,
        1,
        64,
        11,
        24,
        0,
        64,
        243,
        169,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        9,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        12,
        33,
        0,
        64,
        11,
        33,
        0,
        64,
        243,
        169,
        1,
        64,
        55,
        146,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        55,
        146,
        1,
        64,
        13,
        33,
        0,
        64,
        143,
        138,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        175,
        144,
        1,
        64,
        13,
        37,
        0,
        64,
        151,
        164,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_35f52167c82b1ad09a2b37a846fe20c3ec257d036083301fce3b32f6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        17,
        45,
        0,
        64,
        13,
        45,
        0,
        64,
        21,
        45,
        0,
        64,
        143,
        138,
        1,
        64,
        151,
        164,
        1,
        64,
        159,
        141,
        1,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        159,
        141,
        1,
        64,
        25,
        45,
        0,
        64,
        115,
        145,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        25,
        49,
        0,
        64,
        26,
        49,
        0,
        64,
        115,
        145,
        1,
        64,
        115,
        145,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        115,
        145,
        1,
        64,
        231,
        130,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        231,
        130,
        1,
        64,
        27,
        49,
        0,
        64,
        115,
        145,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        9,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        28,
        58,
        0,
        64,
        27,
        58,
        0,
        64,
        115,
        145,
        1,
        64,
        175,
        144,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        175,
        144,
        1,
        64,
        29,
        58,
        0,
        64,
        151,
        164,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_c49895ea0b1fcc3f99bc69b0b69410a59a3c62a42420fb62c0c95cf6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        29,
        62,
        0,
        64,
        33,
        62,
        0,
        64,
        151,
        164,
        1,
        64,
        159,
        141,
        1,
        64,
        167,
        167,
        1,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        167,
        1,
        64,
        37,
        62,
        0,
        64,
        115,
        145,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        38,
        66,
        0,
        64,
        37,
        66,
        0,
        64,
        115,
        145,
        1,
        64,
        115,
        145,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        115,
        145,
        1,
        64,
        231,
        130,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        231,
        130,
        1,
        64,
        39,
        66,
        0,
        64,
        115,
        145,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        9,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        40,
        75,
        0,
        64,
        39,
        75,
        0,
        64,
        115,
        145,
        1,
        64,
        175,
        144,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        175,
        144,
        1,
        64,
        41,
        75,
        0,
        64,
        159,
        141,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_e742449ea383ad141b1c764d25f72c663a87a528e401ee81d337072e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        45,
        79,
        0,
        64,
        41,
        79,
        0,
        64,
        167,
        167,
        1,
        64,
        159,
        141,
        1,
        64,
        167,
        167,
        1,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        167,
        167,
        1,
        64,
        49,
        79,
        0,
        64,
        55,
        146,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        49,
        83,
        0,
        64,
        50,
        83,
        0,
        64,
        55,
        146,
        1,
        64,
        115,
        145,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        115,
        145,
        1,
        64,
        231,
        130,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        231,
        130,
        1,
        64,
        51,
        83,
        0,
        64,
        55,
        146,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        9,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        51,
        92,
        0,
        64,
        52,
        92,
        0,
        64,
        55,
        146,
        1,
        64,
        115,
        145,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        115,
        145,
        1,
        64,
        53,
        92,
        0,
        64,
        159,
        141,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_4528ce85e1c5a6d843047992c0c9c690a469bf7d45294cc16e7794c5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        57,
        96,
        0,
        64,
        53,
        96,
        0,
        64,
        159,
        141,
        1,
        64,
        167,
        167,
        1,
        64,
        55,
        146,
        1,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        55,
        146,
        1,
        64,
        61,
        96,
        0,
        64,
        115,
        145,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        62,
        100,
        0,
        64,
        61,
        100,
        0,
        64,
        115,
        145,
        1,
        64,
        175,
        144,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        175,
        144,
        1,
        64,
        231,
        130,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        231,
        130,
        1,
        64,
        63,
        100,
        0,
        64,
        115,
        145,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        9,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        63,
        109,
        0,
        64,
        64,
        109,
        0,
        64,
        115,
        145,
        1,
        64,
        243,
        169,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        243,
        169,
        1,
        64,
        65,
        109,
        0,
        64,
        143,
        138,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_e742449ea383ad141b1c764d25f72c663a87a528e401ee81d337072e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        69,
        113,
        0,
        64,
        65,
        113,
        0,
        64,
        55,
        146,
        1,
        64,
        143,
        138,
        1,
        64,
        55,
        146,
        1,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        55,
        146,
        1,
        64,
        73,
        113,
        0,
        64,
        115,
        145,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        73,
        117,
        0,
        64,
        74,
        117,
        0,
        64,
        115,
        145,
        1,
        64,
        115,
        145,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        115,
        145,
        1,
        64,
        231,
        130,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        231,
        130,
        1,
        64,
        75,
        117,
        0,
        64,
        115,
        145,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        9,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        76,
        126,
        0,
        64,
        75,
        126,
        0,
        64,
        115,
        145,
        1,
        64,
        115,
        145,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        115,
        145,
        1,
        64,
        77,
        126,
        0,
        64,
        159,
        141,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_4528ce85e1c5a6d843047992c0c9c690a469bf7d45294cc16e7794c5",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        81,
        130,
        0,
        64,
        77,
        130,
        0,
        64,
        159,
        141,
        1,
        64,
        55,
        146,
        1,
        64,
        159,
        141,
        1,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        196,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_a73d6417028f0b285d50e54757b90b31d98ada1211f66bd0af5efb97",
      "threadgroups_per_grid": {
        "width": 196,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        159,
        141,
        1,
        64,
        175,
        144,
        1,
        1,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        175,
        144,
        1,
        64,
        85,
        130,
        0,
        64,
        55,
        146,
        1,
        49,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        87,
        138,
        0,
        64,
        85,
        138,
        0,
        64,
        55,
        146,
        1,
        64,
        55,
        146,
        1,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        49,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 81,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        55,
        146,
        1,
        64,
        143,
        138,
        1,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        143,
        138,
        1,
        64,
        89,
        138,
        0,
        64,
        55,
        146,
        1,
        49,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        18,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        91,
        174,
        0,
        64,
        89,
        174,
        0,
        64,
        55,
        146,
        1,
        64,
        243,
        169,
        1,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        49,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 32,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        243,
        169,
        1,
        64,
        93,
        174,
        0,
        64,
        167,
        167,
        1,
        49,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 32,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        175,
        144,
        1,
        64,
        93,
        190,
        0,
        64,
        39,
        143,
        1,
        49,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_3b2962ea306807ae8e407c686c162810d84fc70f22a63d48ea9a603a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        101,
        222,
        0,
        64,
        109,
        222,
        0,
        64,
        93,
        222,
        0,
        64,
        39,
        143,
        1,
        64,
        167,
        167,
        1,
        64,
        175,
        144,
        1,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        49,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        175,
        144,
        1,
        64,
        117,
        222,
        0,
        64,
        55,
        146,
        1,
        49,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        8,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_bc56ebe5da5170977b2d219718dc545fb3dcd49e30983d715e1a57bd",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        119,
        238,
        0,
        64,
        117,
        238,
        0,
        64,
        55,
        146,
        1,
        64,
        243,
        169,
        1,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        49,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 81,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        243,
        169,
        1,
        64,
        143,
        138,
        1,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        143,
        138,
        1,
        64,
        121,
        238,
        0,
        64,
        55,
        146,
        1,
        49,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        18,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        121,
        18,
        1,
        64,
        123,
        18,
        1,
        64,
        55,
        146,
        1,
        64,
        55,
        146,
        1,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        49,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 32,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        55,
        146,
        1,
        64,
        125,
        18,
        1,
        64,
        167,
        167,
        1,
        49,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_e742449ea383ad141b1c764d25f72c663a87a528e401ee81d337072e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        133,
        34,
        1,
        64,
        125,
        34,
        1,
        64,
        175,
        144,
        1,
        64,
        167,
        167,
        1,
        64,
        175,
        144,
        1,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        49,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        175,
        144,
        1,
        64,
        141,
        34,
        1,
        64,
        243,
        169,
        1,
        49,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        8,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        141,
        50,
        1,
        64,
        143,
        50,
        1,
        64,
        243,
        169,
        1,
        64,
        55,
        146,
        1,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        49,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_dd5a967a90f95059d05657fb827f839569ee043c5e56cbfeb987f6f8",
      "threadgroups_per_grid": {
        "width": 81,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        55,
        146,
        1,
        64,
        143,
        138,
        1,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        143,
        138,
        1,
        64,
        145,
        50,
        1,
        64,
        243,
        169,
        1,
        49,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        18,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_f2aa186c2d2e8abb36055f2f29f9c65f9362331b50008c9a0ebc5a23",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        145,
        86,
        1,
        64,
        147,
        86,
        1,
        64,
        243,
        169,
        1,
        64,
        55,
        146,
        1,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        49,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 32,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        55,
        146,
        1,
        64,
        149,
        86,
        1,
        64,
        167,
        167,
        1,
        49,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_e742449ea383ad141b1c764d25f72c663a87a528e401ee81d337072e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        157,
        102,
        1,
        64,
        149,
        102,
        1,
        64,
        175,
        144,
        1,
        64,
        167,
        167,
        1,
        64,
        175,
        144,
        1,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        49,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "averagepooling2d_e40a36b3a1265ae67e8fac3ce9b75331da5987fb264e9b069187c9c1",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        175,
        144,
        1,
        64,
        63,
        146,
        1,
        1,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "transpose_004b4f39e9e976c3a0c2492294b329e4263fa637435784552851f71d",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        63,
        146,
        1,
        64,
        55,
        146,
        1,
        0,
        8,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "sgemm_38ceab045b96881f2c13581f6f973ec647e3627b5ad6a15d200a3fe6",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        55,
        146,
        1,
        64,
        165,
        102,
        1,
        64,
        63,
        146,
        1,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        8,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "elementwiseadd_59df3b0d6feefd576062ac58c68e6dade28056ea47dd0a57294bdf90",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        64,
        165,
        118,
        1,
        64,
        63,
        146,
        1,
        64,
        63,
        146,
        1,
        0,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    }
  ],
  "weight_encoding": "eightbit",
  "memory_layout": {
    "static": {
      "size": 28115776,
      "allocations": {
        "a158": {
          "name": "a158",
          "offset": 27965248,
          "size": 150528
        },
        "a160": {
          "name": "a160",
          "offset": 27764544,
          "size": 150528
        },
        "a161": {
          "name": "a161",
          "offset": 24553280,
          "size": 1843968
        },
        "a162": {
          "name": "a162",
          "offset": 27162432,
          "size": 802816
        },
        "a163": {
          "name": "a163",
          "offset": 24553280,
          "size": 802816
        },
        "a164": {
          "name": "a164",
          "offset": 27563840,
          "size": 200704
        },
        "a288": {
          "name": "a288",
          "offset": 27764544,
          "size": 200704
        },
        "a167": {
          "name": "a167",
          "offset": 24553280,
          "size": 1806336
        },
        "a168": {
          "name": "a168",
          "offset": 27764544,
          "size": 200704
        },
        "a169": {
          "name": "a169",
          "offset": 26058560,
          "size": 200704
        },
        "a171": {
          "name": "a171",
          "offset": 25356096,
          "size": 802816
        },
        "a170": {
          "name": "a170",
          "offset": 24553280,
          "size": 802816
        },
        "a172": {
          "name": "a172",
          "offset": 26359616,
          "size": 802816
        },
        "a173": {
          "name": "a173",
          "offset": 26058560,
          "size": 200704
        },
        "a174": {
          "name": "a174",
          "offset": 27563840,
          "size": 200704
        },
        "a175": {
          "name": "a175",
          "offset": 24553280,
          "size": 1806336
        },
        "a176": {
          "name": "a176",
          "offset": 27563840,
          "size": 200704
        },
        "a177": {
          "name": "a177",
          "offset": 26058560,
          "size": 200704
        },
        "a289": {
          "name": "a289",
          "offset": 27162432,
          "size": 802816
        },
        "a180": {
          "name": "a180",
          "offset": 26058560,
          "size": 200704
        },
        "a181": {
          "name": "a181",
          "offset": 26359616,
          "size": 200704
        },
        "a182": {
          "name": "a182",
          "offset": 24553280,
          "size": 1806336
        },
        "a183": {
          "name": "a183",
          "offset": 26359616,
          "size": 200704
        },
        "a184": {
          "name": "a184",
          "offset": 26058560,
          "size": 200704
        },
        "a185": {
          "name": "a185",
          "offset": 26359616,
          "size": 802816
        },
        "a186": {
          "name": "a186",
          "offset": 25356096,
          "size": 802816
        },
        "a187": {
          "name": "a187",
          "offset": 26158912,
          "size": 200704
        },
        "a188": {
          "name": "a188",
          "offset": 27764544,
          "size": 100352
        },
        "a189": {
          "name": "a189",
          "offset": 27864896,
          "size": 100352
        },
        "a190": {
          "name": "a190",
          "offset": 24553280,
          "size": 903168
        },
        "a191": {
          "name": "a191",
          "offset": 27764544,
          "size": 100352
        },
        "a192": {
          "name": "a192",
          "offset": 26359616,
          "size": 100352
        },
        "a194": {
          "name": "a194",
          "offset": 26359616,
          "size": 401408
        },
        "a193": {
          "name": "a193",
          "offset": 27563840,
          "size": 401408
        },
        "a195": {
          "name": "a195",
          "offset": 25857856,
          "size": 401408
        },
        "a290": {
          "name": "a290",
          "offset": 26259264,
          "size": 100352
        },
        "a198": {
          "name": "a198",
          "offset": 24553280,
          "size": 903168
        },
        "a199": {
          "name": "a199",
          "offset": 26259264,
          "size": 100352
        },
        "a200": {
          "name": "a200",
          "offset": 27764544,
          "size": 100352
        },
        "a201": {
          "name": "a201",
          "offset": 27162432,
          "size": 401408
        },
        "a202": {
          "name": "a202",
          "offset": 27563840,
          "size": 401408
        },
        "a203": {
          "name": "a203",
          "offset": 26359616,
          "size": 100352
        },
        "a204": {
          "name": "a204",
          "offset": 26259264,
          "size": 100352
        },
        "a205": {
          "name": "a205",
          "offset": 24553280,
          "size": 903168
        },
        "a206": {
          "name": "a206",
          "offset": 26259264,
          "size": 100352
        },
        "a207": {
          "name": "a207",
          "offset": 26158912,
          "size": 100352
        },
        "a291": {
          "name": "a291",
          "offset": 25456448,
          "size": 401408
        },
        "a210": {
          "name": "a210",
          "offset": 26259264,
          "size": 100352
        },
        "a211": {
          "name": "a211",
          "offset": 26158912,
          "size": 100352
        },
        "a212": {
          "name": "a212",
          "offset": 24553280,
          "size": 903168
        },
        "a292": {
          "name": "a292",
          "offset": 26158912,
          "size": 100352
        },
        "a215": {
          "name": "a215",
          "offset": 27563840,
          "size": 401408
        },
        "a216": {
          "name": "a216",
          "offset": 25857856,
          "size": 401408
        },
        "a217": {
          "name": "a217",
          "offset": 26259264,
          "size": 100352
        },
        "a218": {
          "name": "a218",
          "offset": 27864896,
          "size": 50176
        },
        "a219": {
          "name": "a219",
          "offset": 27915072,
          "size": 50176
        },
        "a220": {
          "name": "a220",
          "offset": 25356096,
          "size": 451584
        },
        "a221": {
          "name": "a221",
          "offset": 27915072,
          "size": 50176
        },
        "a222": {
          "name": "a222",
          "offset": 26359616,
          "size": 50176
        },
        "a224": {
          "name": "a224",
          "offset": 27563840,
          "size": 200704
        },
        "a223": {
          "name": "a223",
          "offset": 25857856,
          "size": 200704
        },
        "a225": {
          "name": "a225",
          "offset": 26058560,
          "size": 200704
        },
        "a293": {
          "name": "a293",
          "offset": 26309440,
          "size": 50176
        },
        "a228": {
          "name": "a228",
          "offset": 25356096,
          "size": 451584
        },
        "a229": {
          "name": "a229",
          "offset": 26309440,
          "size": 50176
        },
        "a230": {
          "name": "a230",
          "offset": 26259264,
          "size": 50176
        },
        "a231": {
          "name": "a231",
          "offset": 27563840,
          "size": 200704
        },
        "a295": {
          "name": "a295",
          "offset": 27764544,
          "size": 200704
        },
        "a294": {
          "name": "a294",
          "offset": 26309440,
          "size": 50176
        },
        "a235": {
          "name": "a235",
          "offset": 25356096,
          "size": 451584
        },
        "a236": {
          "name": "a236",
          "offset": 26309440,
          "size": 50176
        },
        "a237": {
          "name": "a237",
          "offset": 26259264,
          "size": 50176
        },
        "a238": {
          "name": "a238",
          "offset": 26058560,
          "size": 200704
        },
        "a240": {
          "name": "a240",
          "offset": 26359616,
          "size": 50176
        },
        "a241": {
          "name": "a241",
          "offset": 26309440,
          "size": 50176
        },
        "a242": {
          "name": "a242",
          "offset": 25356096,
          "size": 451584
        },
        "a243": {
          "name": "a243",
          "offset": 26359616,
          "size": 50176
        },
        "a244": {
          "name": "a244",
          "offset": 26309440,
          "size": 50176
        },
        "a245": {
          "name": "a245",
          "offset": 26058560,
          "size": 200704
        },
        "a296": {
          "name": "a296",
          "offset": 26359616,
          "size": 200704
        },
        "a247": {
          "name": "a247",
          "offset": 26309440,
          "size": 50176
        },
        "a248": {
          "name": "a248",
          "offset": 26259264,
          "size": 50176
        },
        "a249": {
          "name": "a249",
          "offset": 25356096,
          "size": 451584
        },
        "a250": {
          "name": "a250",
          "offset": 26309440,
          "size": 50176
        },
        "a251": {
          "name": "a251",
          "offset": 27915072,
          "size": 50176
        },
        "a252": {
          "name": "a252",
          "offset": 25857856,
          "size": 200704
        },
        "a297": {
          "name": "a297",
          "offset": 26309440,
          "size": 50176
        },
        "a256": {
          "name": "a256",
          "offset": 25356096,
          "size": 451584
        },
        "a298": {
          "name": "a298",
          "offset": 26309440,
          "size": 50176
        },
        "a299": {
          "name": "a299",
          "offset": 26058560,
          "size": 200704
        },
        "a261": {
          "name": "a261",
          "offset": 26259264,
          "size": 50176
        },
        "a300": {
          "name": "a300",
          "offset": 26359616,
          "size": 25088
        },
        "a264": {
          "name": "a264",
          "offset": 25857856,
          "size": 225792
        },
        "a265": {
          "name": "a265",
          "offset": 26359616,
          "size": 25088
        },
        "a266": {
          "name": "a266",
          "offset": 27915072,
          "size": 25088
        },
        "a268": {
          "name": "a268",
          "offset": 26158912,
          "size": 100352
        },
        "a267": {
          "name": "a267",
          "offset": 27764544,
          "size": 100352
        },
        "a303": {
          "name": "a303",
          "offset": 26259264,
          "size": 100352
        },
        "a270": {
          "name": "a270",
          "offset": 26359616,
          "size": 25088
        },
        "a271": {
          "name": "a271",
          "offset": 27915072,
          "size": 25088
        },
        "a272": {
          "name": "a272",
          "offset": 25857856,
          "size": 225792
        },
        "a301": {
          "name": "a301",
          "offset": 26359616,
          "size": 25088
        },
        "a275": {
          "name": "a275",
          "offset": 27764544,
          "size": 100352
        },
        "a277": {
          "name": "a277",
          "offset": 27915072,
          "size": 25088
        },
        "a278": {
          "name": "a278",
          "offset": 26359616,
          "size": 25088
        },
        "a279": {
          "name": "a279",
          "offset": 25857856,
          "size": 225792
        },
        "a280": {
          "name": "a280",
          "offset": 27915072,
          "size": 25088
        },
        "a281": {
          "name": "a281",
          "offset": 26359616,
          "size": 25088
        },
        "a282": {
          "name": "a282",
          "offset": 27764544,
          "size": 100352
        },
        "a284": {
          "name": "a284",
          "offset": 26361664,
          "size": 2048
        },
        "a304": {
          "name": "a304",
          "offset": 26359616,
          "size": 2048
        },
        "a305": {
          "name": "a305",
          "offset": 26361664,
          "size": 512
        },
        "a1": {
          "name": "a1",
          "offset": 0,
          "size": 9408
        },
        "a2": {
          "name": "a2",
          "offset": 9408,
          "size": 64
        },
        "a3": {
          "name": "a3",
          "offset": 9472,
          "size": 64
        },
        "a4": {
          "name": "a4",
          "offset": 9536,
          "size": 4096
        },
        "a5": {
          "name": "a5",
          "offset": 13632,
          "size": 64
        },
        "a6": {
          "name": "a6",
          "offset": 13696,
          "size": 64
        },
        "a7": {
          "name": "a7",
          "offset": 13760,
          "size": 36864
        },
        "a8": {
          "name": "a8",
          "offset": 50624,
          "size": 64
        },
        "a9": {
          "name": "a9",
          "offset": 50688,
          "size": 64
        },
        "a10": {
          "name": "a10",
          "offset": 50752,
          "size": 16384
        },
        "a11": {
          "name": "a11",
          "offset": 67136,
          "size": 16384
        },
        "a12": {
          "name": "a12",
          "offset": 83520,
          "size": 256
        },
        "a13": {
          "name": "a13",
          "offset": 83776,
          "size": 256
        },
        "a14": {
          "name": "a14",
          "offset": 84032,
          "size": 256
        },
        "a15": {
          "name": "a15",
          "offset": 84288,
          "size": 16384
        },
        "a16": {
          "name": "a16",
          "offset": 100672,
          "size": 64
        },
        "a17": {
          "name": "a17",
          "offset": 100736,
          "size": 64
        },
        "a18": {
          "name": "a18",
          "offset": 100800,
          "size": 36864
        },
        "a19": {
          "name": "a19",
          "offset": 137664,
          "size": 64
        },
        "a20": {
          "name": "a20",
          "offset": 137728,
          "size": 64
        },
        "a21": {
          "name": "a21",
          "offset": 137792,
          "size": 16384
        },
        "a22": {
          "name": "a22",
          "offset": 154176,
          "size": 256
        },
        "a23": {
          "name": "a23",
          "offset": 154432,
          "size": 256
        },
        "a24": {
          "name": "a24",
          "offset": 154688,
          "size": 16384
        },
        "a25": {
          "name": "a25",
          "offset": 171072,
          "size": 64
        },
        "a26": {
          "name": "a26",
          "offset": 171136,
          "size": 64
        },
        "a27": {
          "name": "a27",
          "offset": 171200,
          "size": 36864
        },
        "a28": {
          "name": "a28",
          "offset": 208064,
          "size": 64
        },
        "a29": {
          "name": "a29",
          "offset": 208128,
          "size": 64
        },
        "a30": {
          "name": "a30",
          "offset": 208192,
          "size": 16384
        },
        "a31": {
          "name": "a31",
          "offset": 224576,
          "size": 256
        },
        "a32": {
          "name": "a32",
          "offset": 224832,
          "size": 256
        },
        "a33": {
          "name": "a33",
          "offset": 225088,
          "size": 32768
        },
        "a34": {
          "name": "a34",
          "offset": 257856,
          "size": 128
        },
        "a35": {
          "name": "a35",
          "offset": 257984,
          "size": 128
        },
        "a36": {
          "name": "a36",
          "offset": 258112,
          "size": 147456
        },
        "a37": {
          "name": "a37",
          "offset": 405568,
          "size": 128
        },
        "a38": {
          "name": "a38",
          "offset": 405696,
          "size": 128
        },
        "a39": {
          "name": "a39",
          "offset": 405824,
          "size": 65536
        },
        "a40": {
          "name": "a40",
          "offset": 471360,
          "size": 131072
        },
        "a41": {
          "name": "a41",
          "offset": 602432,
          "size": 512
        },
        "a42": {
          "name": "a42",
          "offset": 602944,
          "size": 512
        },
        "a43": {
          "name": "a43",
          "offset": 603456,
          "size": 512
        },
        "a44": {
          "name": "a44",
          "offset": 603968,
          "size": 65536
        },
        "a45": {
          "name": "a45",
          "offset": 669504,
          "size": 128
        },
        "a46": {
          "name": "a46",
          "offset": 669632,
          "size": 128
        },
        "a47": {
          "name": "a47",
          "offset": 669760,
          "size": 147456
        },
        "a48": {
          "name": "a48",
          "offset": 817216,
          "size": 128
        },
        "a49": {
          "name": "a49",
          "offset": 817344,
          "size": 128
        },
        "a50": {
          "name": "a50",
          "offset": 817472,
          "size": 65536
        },
        "a51": {
          "name": "a51",
          "offset": 883008,
          "size": 512
        },
        "a52": {
          "name": "a52",
          "offset": 883520,
          "size": 512
        },
        "a53": {
          "name": "a53",
          "offset": 884032,
          "size": 65536
        },
        "a54": {
          "name": "a54",
          "offset": 949568,
          "size": 128
        },
        "a55": {
          "name": "a55",
          "offset": 949696,
          "size": 128
        },
        "a56": {
          "name": "a56",
          "offset": 949824,
          "size": 147456
        },
        "a57": {
          "name": "a57",
          "offset": 1097280,
          "size": 128
        },
        "a58": {
          "name": "a58",
          "offset": 1097408,
          "size": 128
        },
        "a59": {
          "name": "a59",
          "offset": 1097536,
          "size": 65536
        },
        "a60": {
          "name": "a60",
          "offset": 1163072,
          "size": 512
        },
        "a61": {
          "name": "a61",
          "offset": 1163584,
          "size": 512
        },
        "a62": {
          "name": "a62",
          "offset": 1164096,
          "size": 65536
        },
        "a63": {
          "name": "a63",
          "offset": 1229632,
          "size": 128
        },
        "a64": {
          "name": "a64",
          "offset": 1229760,
          "size": 128
        },
        "a65": {
          "name": "a65",
          "offset": 1229888,
          "size": 147456
        },
        "a66": {
          "name": "a66",
          "offset": 1377344,
          "size": 128
        },
        "a67": {
          "name": "a67",
          "offset": 1377472,
          "size": 128
        },
        "a68": {
          "name": "a68",
          "offset": 1377600,
          "size": 65536
        },
        "a69": {
          "name": "a69",
          "offset": 1443136,
          "size": 512
        },
        "a70": {
          "name": "a70",
          "offset": 1443648,
          "size": 512
        },
        "a71": {
          "name": "a71",
          "offset": 1444160,
          "size": 131072
        },
        "a72": {
          "name": "a72",
          "offset": 1575232,
          "size": 256
        },
        "a73": {
          "name": "a73",
          "offset": 1575488,
          "size": 256
        },
        "a74": {
          "name": "a74",
          "offset": 1575744,
          "size": 589824
        },
        "a75": {
          "name": "a75",
          "offset": 2165568,
          "size": 256
        },
        "a76": {
          "name": "a76",
          "offset": 2165824,
          "size": 256
        },
        "a77": {
          "name": "a77",
          "offset": 2166080,
          "size": 262144
        },
        "a78": {
          "name": "a78",
          "offset": 2428224,
          "size": 524288
        },
        "a79": {
          "name": "a79",
          "offset": 2952512,
          "size": 1024
        },
        "a80": {
          "name": "a80",
          "offset": 2953536,
          "size": 1024
        },
        "a81": {
          "name": "a81",
          "offset": 2954560,
          "size": 1024
        },
        "a82": {
          "name": "a82",
          "offset": 2955584,
          "size": 262144
        },
        "a83": {
          "name": "a83",
          "offset": 3217728,
          "size": 256
        },
        "a84": {
          "name": "a84",
          "offset": 3217984,
          "size": 256
        },
        "a85": {
          "name": "a85",
          "offset": 3218240,
          "size": 589824
        },
        "a86": {
          "name": "a86",
          "offset": 3808064,
          "size": 256
        },
        "a87": {
          "name": "a87",
          "offset": 3808320,
          "size": 256
        },
        "a88": {
          "name": "a88",
          "offset": 3808576,
          "size": 262144
        },
        "a89": {
          "name": "a89",
          "offset": 4070720,
          "size": 1024
        },
        "a90": {
          "name": "a90",
          "offset": 4071744,
          "size": 1024
        },
        "a91": {
          "name": "a91",
          "offset": 4072768,
          "size": 262144
        },
        "a92": {
          "name": "a92",
          "offset": 4334912,
          "size": 256
        },
        "a93": {
          "name": "a93",
          "offset": 4335168,
          "size": 256
        },
        "a94": {
          "name": "a94",
          "offset": 4335424,
          "size": 589824
        },
        "a95": {
          "name": "a95",
          "offset": 4925248,
          "size": 256
        },
        "a96": {
          "name": "a96",
          "offset": 4925504,
          "size": 256
        },
        "a97": {
          "name": "a97",
          "offset": 4925760,
          "size": 262144
        },
        "a98": {
          "name": "a98",
          "offset": 5187904,
          "size": 1024
        },
        "a99": {
          "name": "a99",
          "offset": 5188928,
          "size": 1024
        },
        "a100": {
          "name": "a100",
          "offset": 5189952,
          "size": 262144
        },
        "a101": {
          "name": "a101",
          "offset": 5452096,
          "size": 256
        },
        "a102": {
          "name": "a102",
          "offset": 5452352,
          "size": 256
        },
        "a103": {
          "name": "a103",
          "offset": 5452608,
          "size": 589824
        },
        "a104": {
          "name": "a104",
          "offset": 6042432,
          "size": 256
        },
        "a105": {
          "name": "a105",
          "offset": 6042688,
          "size": 256
        },
        "a106": {
          "name": "a106",
          "offset": 6042944,
          "size": 262144
        },
        "a107": {
          "name": "a107",
          "offset": 6305088,
          "size": 1024
        },
        "a108": {
          "name": "a108",
          "offset": 6306112,
          "size": 1024
        },
        "a109": {
          "name": "a109",
          "offset": 6307136,
          "size": 262144
        },
        "a110": {
          "name": "a110",
          "offset": 6569280,
          "size": 256
        },
        "a111": {
          "name": "a111",
          "offset": 6569536,
          "size": 256
        },
        "a112": {
          "name": "a112",
          "offset": 6569792,
          "size": 589824
        },
        "a113": {
          "name": "a113",
          "offset": 7159616,
          "size": 256
        },
        "a114": {
          "name": "a114",
          "offset": 7159872,
          "size": 256
        },
        "a115": {
          "name": "a115",
          "offset": 7160128,
          "size": 262144
        },
        "a116": {
          "name": "a116",
          "offset": 7422272,
          "size": 1024
        },
        "a117": {
          "name": "a117",
          "offset": 7423296,
          "size": 1024
        },
        "a118": {
          "name": "a118",
          "offset": 7424320,
          "size": 262144
        },
        "a119": {
          "name": "a119",
          "offset": 7686464,
          "size": 256
        },
        "a120": {
          "name": "a120",
          "offset": 7686720,
          "size": 256
        },
        "a121": {
          "name": "a121",
          "offset": 7686976,
          "size": 589824
        },
        "a122": {
          "name": "a122",
          "offset": 8276800,
          "size": 256
        },
        "a123": {
          "name": "a123",
          "offset": 8277056,
          "size": 256
        },
        "a124": {
          "name": "a124",
          "offset": 8277312,
          "size": 262144
        },
        "a125": {
          "name": "a125",
          "offset": 8539456,
          "size": 1024
        },
        "a126": {
          "name": "a126",
          "offset": 8540480,
          "size": 1024
        },
        "a127": {
          "name": "a127",
          "offset": 8541504,
          "size": 524288
        },
        "a128": {
          "name": "a128",
          "offset": 9065792,
          "size": 512
        },
        "a129": {
          "name": "a129",
          "offset": 9066304,
          "size": 512
        },
        "a130": {
          "name": "a130",
          "offset": 9066816,
          "size": 2359296
        },
        "a131": {
          "name": "a131",
          "offset": 11426112,
          "size": 512
        },
        "a132": {
          "name": "a132",
          "offset": 11426624,
          "size": 512
        },
        "a133": {
          "name": "a133",
          "offset": 11427136,
          "size": 1048576
        },
        "a134": {
          "name": "a134",
          "offset": 12475712,
          "size": 2097152
        },
        "a135": {
          "name": "a135",
          "offset": 14572864,
          "size": 2048
        },
        "a136": {
          "name": "a136",
          "offset": 14574912,
          "size": 2048
        },
        "a137": {
          "name": "a137",
          "offset": 14576960,
          "size": 2048
        },
        "a138": {
          "name": "a138",
          "offset": 14579008,
          "size": 1048576
        },
        "a139": {
          "name": "a139",
          "offset": 15627584,
          "size": 512
        },
        "a140": {
          "name": "a140",
          "offset": 15628096,
          "size": 512
        },
        "a141": {
          "name": "a141",
          "offset": 15628608,
          "size": 2359296
        },
        "a142": {
          "name": "a142",
          "offset": 17987904,
          "size": 512
        },
        "a143": {
          "name": "a143",
          "offset": 17988416,
          "size": 512
        },
        "a144": {
          "name": "a144",
          "offset": 17988928,
          "size": 1048576
        },
        "a145": {
          "name": "a145",
          "offset": 19037504,
          "size": 2048
        },
        "a146": {
          "name": "a146",
          "offset": 19039552,
          "size": 2048
        },
        "a147": {
          "name": "a147",
          "offset": 19041600,
          "size": 1048576
        },
        "a148": {
          "name": "a148",
          "offset": 20090176,
          "size": 512
        },
        "a149": {
          "name": "a149",
          "offset": 20090688,
          "size": 512
        },
        "a150": {
          "name": "a150",
          "offset": 20091200,
          "size": 2359296
        },
        "a151": {
          "name": "a151",
          "offset": 22450496,
          "size": 512
        },
        "a152": {
          "name": "a152",
          "offset": 22451008,
          "size": 512
        },
        "a153": {
          "name": "a153",
          "offset": 22451520,
          "size": 1048576
        },
        "a154": {
          "name": "a154",
          "offset": 23500096,
          "size": 2048
        },
        "a155": {
          "name": "a155",
          "offset": 23502144,
          "size": 2048
        },
        "a156": {
          "name": "a156",
          "offset": 23504192,
          "size": 1048576
        },
        "a157": {
          "name": "a157",
          "offset": 24552768,
          "size": 512
        }
      }
    },
    "dynamic": {
      "size": 0,
      "allocations": {}
    }
  },
  "placeholders": {
    "__MAX_THREADS_PER_THREADGROUP__": null
  },
  "inputs": [
    "a158"
  ],
  "outputs": [
    "a305"
  ],
  "licenses": {
    "webdnn": "(C) Machine Intelligence Laboratory (The University of Tokyo), MIT License"
  }
}